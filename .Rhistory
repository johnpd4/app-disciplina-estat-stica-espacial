"Maranhao" = "MA_Municipios_2022.shp",
"Mato" = "MT_Municipios_2022.shp",
"Mato_Sul" = "MS_Municipios_2022.shp",
"Minas" = "MG_Municipios_2022.shp",
"Para" = "PA_Municipios_2022.shp",
"Paraiba" = "PB_Municipios_2022.shp",
"Parana" = "PR_Municipios_2022.shp",
"Pernambuco" = "PE_Municipios_2022.shp",
"Piaui" = "PI_Municipios_2022.shp",
"RJ" = "RJ_Municipios_2022.shp",
"Rio_norte" = "RN_Municipios_2022.shp",
"Rio_Grande_do_Sul" = "RS_Municipios_2022.shp",
"Rondonia" = "RO_Municipios_2022.shp",
"Roraima" = "RR_Municipios_2022.shp",
"Catarina" = "SC_Municipios_2022.shp",
"SP" = "SP_Municipios_2022.shp",
"Sergipe" = "SE_Municipios_2022.shp",
"Tocantins" = "TO_Municipios_2022.shp")
shapefile_path <- file.path(getwd(), "a", shapefile)
st_read(shapefile_path) %>%
st_transform(crs = 4326)
}
observeEvent(input$estadoSelecionado, {
req(input$estadoSelecionado)
#input = data.frame(estadoSelecionado = "Acre", varSelecionada = "Suinos")
mun <- carregar_estado(input$estadoSelecionado)
dados_shp <- carregar_shapefile(input$estadoSelecionado)
dados_merged <- left_join(dados_shp, mun, by = c("NM_MUN"))
dados_merged$PIB_cap <- as.numeric(dados_merged$PIB_cap)
dados_merged$Densi_demo <- as.numeric(dados_merged$Densi_demo)
output$popResidente <- renderText({
pib <- sum(dados_merged$PIB_cap, na.rm = TRUE)
HTML(paste0(format(round(pib, 2), nsmall = 2)))
})
output$densiDemo <- renderText({
densi_demo <- sum(dados_merged$Densi_demo, na.rm = TRUE)
HTML(paste0(format(round(densi_demo, 2), nsmall = 2)))
})
output$mapa_woow <- renderLeaflet({
req(input$varSelecionada)
var_selecionada <- input$varSelecionada
pal <- colorNumeric(
palette = switch(var_selecionada,
"Bovino" = "YlOrRd",
"Equino" = "BuPu",
"Suinos" = "OrRd",
"Galinaceos" = "Greens"),
domain = as.numeric(dados_merged[[var_selecionada]])
)
faz_tabela = function(municipio){
#municipio = "Acrelândia"
dados_tabela = dados_merged |> subset(NM_MUN == municipio) |>
select(Bovino, Equino, Suinos, Galinaceos, AREA_KM2, Pop_residente) |> st_drop_geometry()
area = dados_tabela$AREA_KM2
pop = dados_tabela$Pop_residente
dados_tabela = dados_tabela |> select(-AREA_KM2, -Pop_residente)
dados_tabela[2, ] = dados_tabela[1, ] / area
dados_tabela[3, ] = dados_tabela[1, ] / pop
dados_tabela$Vars = c("Var bruta", "Var / km2", "Var / pop")
dados_tabela = dados_tabela[,c(5, 1, 2, 3, 4)]
rownames(dados_tabela) = c(NULL, NULL, NULL)
tabela = dados_tabela |> knitr::kable(format = "html", rownames = FALSE, digits = 2)
tabela = paste0("<b>", municipio, "</b><br>", tabela)
return(tabela)
}
dados_merged = dados_merged |> mutate(tabela = map_chr(NM_MUN, faz_tabela))
dados_merged = st_as_sf(dados_merged)
leaflet(dados_merged) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
addPolygons(
fillColor = ~pal(get(var_selecionada)),
weight = 1.5,
opacity = 1,
fillOpacity = 0.7,
color = "gray",
highlight = highlightOptions(
weight = 5,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE
),
label =~ lapply(tabela, htmltools::HTML)) |>
# label = ~sprintf(
#   "<b>%s</b><br>%s: %s <br>População: %s <br>Área km²: %s",
#   NM_MUN,
#   var_selecionada,
#   format(round(get(var_selecionada), 2), big.mark = ".", decimal.mark = ","),
#   format(round(Pop_residente, 2), big.mark = ".", decimal.mark = ","),
#   format(round(AREA_KM2, 2), big.mark = ".", decimal.mark = ",")
# ) |> lapply(HTML),
# labelOptions = labelOptions(
#   style = list("font-weight" = "normal", padding = "3px 8px"),
#   textsize = "15px",
#   direction = "auto")) %>%
addLegend("bottomright", pal = pal, values = ~get(var_selecionada), title = var_selecionada, opacity = 1)
})
})
}
shinyApp(ui = ui, server = server)
runApp('Seminario.R')
runApp('Seminario.R')
library(pacman)
pacman::p_load(sf, shiny, bslib, leaflet, dplyr, purrr, knitr, htmltools, fontawesome, shinythemes, bsicons)
setwd("C:\\Users\\Admin\\Desktop\\ufrgs R\\space stats\\shiny 1\\nunes modificado")
arquivos <- list.files(pattern = "\\.csv$", full.names = TRUE)
estados <- gsub("\\.csv$", "", basename(arquivos))
estados <- c(
"Acre" = "Acre",
"Alagoas" = "Alagoas",
"Amapá" = "Amapa",
"Amazonas" = "Amazonas",
"Bahia" = "Bahia",
"Ceará" = "Ceara",
"Distrito Federal" = "DF",
"Espírito Santo" = "Espirito",
"Goiás" = "Goias",
"Maranhão" = "Maranhao",
"Mato Grosso" = "Mato",
"Mato Grosso do Sul" = "Mato_Sul",
"Minas Gerais" = "Minas",
"Pará" = "Para",
"Paraíba" = "Paraiba",
"Paraná" = "Parana",
"Pernambuco" = "Pernambuco",
"Piauí" = "Piaui",
"Rio de Janeiro" = "RJ",
"Rio Grande do Norte" = "Rio_norte",
"Rio Grande do Sul" = "Rio_Grande_do_Sul",
"Rondônia" = "Rondonia",
"Roraima" = "Roraima",
"Santa Catarina" = "Catarina",
"São Paulo" = "SP",
"Sergipe" = "Sergipe",
"Tocantins" = "Tocantins"
)
#superhero
#cyborg
#minty
#solar
#sketchy
#morph
ui <-
page_sidebar(
theme = bs_theme(version = 5, bootswatch = "lux"),
title = "Seminário 1",
sidebar = sidebar(
title = "sidebar woooow",
width = "20%",
open = "always",
selectInput(
inputId = "estadoSelecionado",
label = "Escolha o Estado",
choices = estados
),
selectInput(
inputId = "varSelecionada",
label = "Escolha a Variável",
choices = c("Bovino", "Equino", "Suinos", "Galinaceos")
),
value_box(
title = "PIB",
value = textOutput("popResidente"),
theme = "purple"#,
#style = "width: 260px; height: 90px; font-size: 20px;text-align: center;"
),
value_box(
title = "Densidade Demográfica",
value = textOutput("densiDemo"),
theme = "purple"#,
#style = "width: 260px; height: 90px; font-size: 20px;text-align: center;"
)
), # sidebar
# div(style = "display: flex; justify-content: center; gap: 20px",
#
#
#
#
# ),
leafletOutput("mapa_woow")
)
server <- function(input, output, session) {
carregar_estado <- function(estado) {
estado_csv <- file.path(getwd(), paste0(estado, ".csv"))
df <- read.csv(estado_csv)
return(df)
}
carregar_shapefile <- function(estado) {
shapefile <- switch(estado,
"Acre" = "AC_Municipios_2022.shp",
"Alagoas" = "AL_Municipios_2022.shp",
"Amapa" = "AP_Municipios_2022.shp",
"Amazonas" = "AM_Municipios_2022.shp",
"Bahia" = "BA_Municipios_2022.shp",
"Ceara" = "CE_Municipios_2022.shp",
"DF" = "DF_Municipios_2022.shp",
"Espirito" = "ES_Municipios_2022.shp",
"Goias" = "GO_Municipios_2022.shp",
"Maranhao" = "MA_Municipios_2022.shp",
"Mato" = "MT_Municipios_2022.shp",
"Mato_Sul" = "MS_Municipios_2022.shp",
"Minas" = "MG_Municipios_2022.shp",
"Para" = "PA_Municipios_2022.shp",
"Paraiba" = "PB_Municipios_2022.shp",
"Parana" = "PR_Municipios_2022.shp",
"Pernambuco" = "PE_Municipios_2022.shp",
"Piaui" = "PI_Municipios_2022.shp",
"RJ" = "RJ_Municipios_2022.shp",
"Rio_norte" = "RN_Municipios_2022.shp",
"Rio_Grande_do_Sul" = "RS_Municipios_2022.shp",
"Rondonia" = "RO_Municipios_2022.shp",
"Roraima" = "RR_Municipios_2022.shp",
"Catarina" = "SC_Municipios_2022.shp",
"SP" = "SP_Municipios_2022.shp",
"Sergipe" = "SE_Municipios_2022.shp",
"Tocantins" = "TO_Municipios_2022.shp")
shapefile_path <- file.path(getwd(), "a", shapefile)
st_read(shapefile_path) %>%
st_transform(crs = 4326)
}
observeEvent(input$estadoSelecionado, {
req(input$estadoSelecionado)
#input = data.frame(estadoSelecionado = "Acre", varSelecionada = "Suinos")
mun <- carregar_estado(input$estadoSelecionado)
dados_shp <- carregar_shapefile(input$estadoSelecionado)
dados_merged <- left_join(dados_shp, mun, by = c("NM_MUN"))
dados_merged$PIB_cap <- as.numeric(dados_merged$PIB_cap)
dados_merged$Densi_demo <- as.numeric(dados_merged$Densi_demo)
output$popResidente <- renderText({
pib <- sum(dados_merged$PIB_cap, na.rm = TRUE)
HTML(paste0(format(round(pib, 2), nsmall = 2)))
})
output$densiDemo <- renderText({
densi_demo <- sum(dados_merged$Densi_demo, na.rm = TRUE)
HTML(paste0(format(round(densi_demo, 2), nsmall = 2)))
})
output$mapa_woow <- renderLeaflet({
req(input$varSelecionada)
var_selecionada <- input$varSelecionada
pal <- colorNumeric(
palette = switch(var_selecionada,
"Bovino" = "YlOrRd",
"Equino" = "BuPu",
"Suinos" = "OrRd",
"Galinaceos" = "Greens"),
domain = as.numeric(dados_merged[[var_selecionada]])
)
faz_tabela = function(municipio){
#municipio = "Acrelândia"
dados_tabela = dados_merged |> subset(NM_MUN == municipio) |>
select(Bovino, Equino, Suinos, Galinaceos, AREA_KM2, Pop_residente) |> st_drop_geometry()
area = dados_tabela$AREA_KM2
pop = dados_tabela$Pop_residente
dados_tabela = dados_tabela |> select(-AREA_KM2, -Pop_residente)
dados_tabela[2, ] = dados_tabela[1, ] / area
dados_tabela[3, ] = dados_tabela[1, ] / pop
dados_tabela$Vars = c("Var bruta", "Var / km2", "Var / pop")
dados_tabela = dados_tabela[,c(5, 1, 2, 3, 4)]
rownames(dados_tabela) = c(NULL, NULL, NULL)
tabela = dados_tabela |> knitr::kable(format = "html", rownames = FALSE, digits = 2)
tabela = paste0("<b>", municipio, "</b><br>", tabela)
return(tabela)
}
dados_merged = dados_merged |> mutate(tabela = map_chr(NM_MUN, faz_tabela))
dados_merged = st_as_sf(dados_merged)
leaflet(dados_merged) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
addPolygons(
fillColor = ~pal(get(var_selecionada)),
weight = 1.5,
opacity = 1,
fillOpacity = 0.7,
color = "gray",
highlight = highlightOptions(
weight = 5,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE
),
label =~ lapply(tabela, htmltools::HTML)) |>
# label = ~sprintf(
#   "<b>%s</b><br>%s: %s <br>População: %s <br>Área km²: %s",
#   NM_MUN,
#   var_selecionada,
#   format(round(get(var_selecionada), 2), big.mark = ".", decimal.mark = ","),
#   format(round(Pop_residente, 2), big.mark = ".", decimal.mark = ","),
#   format(round(AREA_KM2, 2), big.mark = ".", decimal.mark = ",")
# ) |> lapply(HTML),
# labelOptions = labelOptions(
#   style = list("font-weight" = "normal", padding = "3px 8px"),
#   textsize = "15px",
#   direction = "auto")) %>%
addLegend("bottomright", pal = pal, values = ~get(var_selecionada), title = var_selecionada, opacity = 1)
})
})
}
shinyApp(ui = ui, server = server)
runApp('Seminario.R')
dados_merged$Pop_residente
dados_merged$AREA_KM2
runApp('Seminario.R')
runApp('Seminario.R')
runApp('Seminario.R')
runApp('Seminario.R')
runApp('Seminario.R')
runApp('Seminario.R')
runApp('Seminario.R')
runApp('Seminario.R')
runApp('Seminario.R')
rlang::last_trace()
runApp('Seminario.R')
runApp('Seminario.R')
runApp('Seminario.R')
H1
?h1
runApp('Seminario.R')
runApp('Seminario.R')
runApp('Seminario.R')
runApp('Seminario.R')
runApp('Seminario.R')
?h1
runApp('Seminario.R')
runApp('Seminario.R')
runApp('Seminario.R')
library(shiny); runApp('Seminario.R')
library(shiny); runApp('Seminario.R')
library(shiny); runApp('Seminario.R')
dados = readxl::read_xlsx("banco score artigo 2.xlsx")
dados[dados == 999] = NA
conta_NA = function(vet){sum(is.na(vet))}
dados$sexo = dados$sexo |> as.factor()
dados$extubacao_ok = dados$extubacao_ok |> as.factor()
dados$paliativa = dados$paliativa |> as.factor()
dados$rachs_1 = dados$rachs_1 |> as.factor()
dados$cec = dados$cec |> as.factor()
dados$complic_pos_op___10 = dados$complic_pos_op___10 |> as.factor()
dados$desfecho = dados$desfecho |> as.factor()
pacman::p_load(gtsummary)
tbl_summary(dados$idade_meses)
?tbl_summary()
tbl_summary(dados, idade_meses)
dados |> select(idade_meses, peso, soma_score_b_0_24h)
dados |> select(idade_meses, peso, soma_score_b_0_24h) |> tbl_summary() |> bold_labels()
dados |> select(idade_meses, peso, extubacao_ok, sexo, idade_meses, peso, rachs_1, pim2, paliativa, cec, bh_cx, tfg_pre_op, soma_score_b_pre_op) |> tbl_summary() |> bold_labels()
?tbl_summary()
dados |> select(idade_meses, peso, extubacao_ok, sexo, idade_meses, peso, rachs_1, pim2, paliativa, cec, bh_cx, tfg_pre_op, soma_score_b_pre_op) |> tbl_summary(label = list(idade_meses ~ "Idade em Meses")) |> bold_labels()
dados |> select(idade_meses, peso, extubacao_ok, sexo, idade_meses, peso, rachs_1, pim2, paliativa, cec, bh_cx, tfg_pre_op, soma_score_b_pre_op) |>
tbl_summary(label = list(idade_meses ~ "Idade em Meses",
peso ~ "Peso",
extubacao_ok ~ "Extubação",
sexo ~ "Sexo",
rachs_1 ~ "Rachs",
pim2 ~ "Pim",
paliativa ~ "Paliativa",
cec ~ "Cec",
bh_cx ~ "Bh Cx",
tfg_pre_op ~ "TFG Pré Operatório",
soma_score_b_pre_op ~ "Score B Pré Op.")) |> bold_labels()
pacman::p_load(gtsummary, plotly)
fig = plot_ly(data = dados, y =~ soma_score_b_pre_op, type = "box", name = "Pré Operatório")
fig
fig = plot_ly(data = dados, y =~ soma_score_b_pre_op, type = "box", name = "Pré Operatório")
fig
fig = add_trace(y =~ soma_score_b_0_24h, type = "box", name = "0-24h")
fig = plot_ly(data = dados, y =~ soma_score_b_pre_op, type = "box", name = "Pré Operatório")
fig = add_trace(y =~ soma_score_b_0_24h, type = "box", name = "0-24h")
fig = plot_ly(data = dados, y =~ soma_score_b_pre_op, type = "box", name = "Pré Operatório")
fig = fig |> add_trace(y =~ soma_score_b_0_24h, name = "0-24h")
fig
fig = plot_ly(data = dados, y =~ soma_score_b_pre_op, type = "box", name = "Pré Operatório")
fig = fig |> add_trace(y =~ soma_score_b_0_24h, name = "0-24h")
fig = fig |> add_trace(y =~ soma_score_b_24_48h, name = "24-48h")
fig = fig |> add_trace(y =~ soma_score_b_48_72h, name = "48-72h")
fig
fig = plot_ly(data = dados, y =~ soma_score_b_pre_op, type = "box", name = "Pré Operatório")
fig = fig |> add_trace(y =~ soma_score_b_0_24h, name = "0-24h")
#fig = fig |> add_trace(y =~ soma_score_b_24_48h, name = "24-48h")
fig = fig |> add_trace(y =~ soma_score_b_48_72h, name = "48-72h")
fig = fig |> add_trace(y =~ soma_score_b_dia_d, name = "Dia D")
fig
dados = readxl::read_xlsx("banco score artigo 2.xlsx")
fig = plot_ly(data = dados, y =~ soma_score_b_pre_op, type = "box", name = "Pré Operatório")
fig = fig |> add_trace(y =~ soma_score_b_0_24h, name = "0-24h")
#fig = fig |> add_trace(y =~ soma_score_b_24_48h, name = "24-48h")
fig = fig |> add_trace(y =~ soma_score_b_48_72h, name = "48-72h")
fig = fig |> add_trace(y =~ soma_score_b_dia_d, name = "Dia D")
fig = fig |> layout(title = "Score B Soma")
fig
pacman::p_load(gtsummary, plotly)
dados = readxl::read_xlsx("banco score artigo 2.xlsx")
dados[dados == 999] = NA
conta_NA = function(vet){sum(is.na(vet))}
dados$sexo = dados$sexo |> as.factor()
dados$extubacao_ok = dados$extubacao_ok |> as.factor()
dados$paliativa = dados$paliativa |> as.factor()
dados$rachs_1 = dados$rachs_1 |> as.factor()
dados$cec = dados$cec |> as.factor()
dados$complic_pos_op___10 = dados$complic_pos_op___10 |> as.factor()
dados$desfecho = dados$desfecho |> as.factor()
dados |> select(idade_meses, peso, extubacao_ok, sexo, idade_meses, peso, rachs_1, pim2, paliativa, cec, bh_cx, tfg_pre_op, soma_score_b_pre_op) |>
tbl_summary(label = list(idade_meses ~ "Idade em Meses",
peso ~ "Peso",
extubacao_ok ~ "Extubação",
sexo ~ "Sexo",
rachs_1 ~ "Rachs",
pim2 ~ "Pim",
paliativa ~ "Paliativa",
cec ~ "Cec",
bh_cx ~ "Bh Cx",
tfg_pre_op ~ "TFG Pré Op.",
soma_score_b_pre_op ~ "Score B Pré Op.")) |> bold_labels()
fig = plot_ly(data = dados, y =~ soma_score_b_pre_op, type = "box", name = "Pré Operatório")
fig = fig |> add_trace(y =~ soma_score_b_0_24h, name = "0-24h")
#fig = fig |> add_trace(y =~ soma_score_b_24_48h, name = "24-48h")
fig = fig |> add_trace(y =~ soma_score_b_48_72h, name = "48-72h")
fig = fig |> add_trace(y =~ soma_score_b_dia_d, name = "Dia D")
fig = fig |> layout(title = "Score B Soma")
fig
fig = plot_ly(data = dados, y =~ soma_score_b_pre_op, type = "box", name = "Pré Operatório")
fig = fig |> add_trace(y =~ soma_score_b_0_24h, name = "0-24h")
#fig = fig |> add_trace(y =~ soma_score_b_24_48h, name = "24-48h")
fig = fig |> add_trace(y =~ soma_score_b_48_72h, name = "48-72h")
fig = fig |> add_trace(y =~ soma_score_b_dia_d, name = "Dia D")
fig = fig |> layout(title = "Score B Soma", xaxis = list(title = "Score"))
fig
fig = plot_ly(data = dados, y =~ soma_score_b_pre_op, type = "box", name = "Pré Operatório")
fig = fig |> add_trace(y =~ soma_score_b_0_24h, name = "0-24h")
#fig = fig |> add_trace(y =~ soma_score_b_24_48h, name = "24-48h")
fig = fig |> add_trace(y =~ soma_score_b_48_72h, name = "48-72h")
fig = fig |> add_trace(y =~ soma_score_b_dia_d, name = "Dia D")
fig = fig |> layout(title = "Score B Soma", yaxis = list(title = "Score"))
fig
fig = plot_ly(data = dados, y =~ soma_score_b_pre_op, type = "box", name = "Pré Operatório", boxmean = T)
fig = fig |> add_trace(y =~ soma_score_b_0_24h, name = "0-24h", boxmean = T)
#fig = fig |> add_trace(y =~ soma_score_b_24_48h, name = "24-48h")
fig = fig |> add_trace(y =~ soma_score_b_48_72h, name = "48-72h", boxmean = T)
fig = fig |> add_trace(y =~ soma_score_b_dia_d, name = "Dia D", boxmean = T)
fig = fig |> layout(title = "Score B Soma", yaxis = list(title = "Score"))
fig
fig = plot_ly(data = dados, y =~ tfg_pre_op, type = "box", name = "Pré Operatório", boxmean = T)
fig = fig |> add_trace(y =~ tfg_0_24h, name = "0-24h", boxmean = T)
#fig = fig |> add_trace(y =~ tfg_24_48h, name = "24-48h")
fig = fig |> add_trace(y =~ tfg_48_72h, name = "48-72h", boxmean = T)
fig = fig |> add_trace(y =~ tfg_dia_d, name = "Dia D", boxmean = T)
fig = fig |> layout(title = "TFG", yaxis = list(title = "Valor"))
fig
fig = plot_ly(data = dados, y =~ soma_score_b_pre_op, type = "box", name = "Pré Operatório", boxmean = T)
fig = fig |> add_trace(y =~ soma_score_b_0_24h, name = "0-24h", boxmean = T)
#fig = fig |> add_trace(y =~ soma_score_b_24_48h, name = "24-48h")
fig = fig |> add_trace(y =~ soma_score_b_48_72h, name = "48-72h", boxmean = T)
fig = fig |> add_trace(y =~ soma_score_b_dia_d, name = "Dia D", boxmean = T)
fig = fig |> layout(yaxis = list(title = "Score"))
fig = fig |> layout(legend = list(title = list(text = "Score B Soma")))
fig
fig = plot_ly(data = dados, y =~ tfg_pre_op, type = "box", name = "Pré Operatório", boxmean = T)
fig = fig |> add_trace(y =~ tfg_0_24h, name = "0-24h", boxmean = T)
#fig = fig |> add_trace(y =~ tfg_24_48h, name = "24-48h")
fig = fig |> add_trace(y =~ tfg_48_72h, name = "48-72h", boxmean = T)
fig = fig |> add_trace(y =~ tfg_dia_d, name = "Dia D", boxmean = T)
fig = fig |> layout(yaxis = list(title = "Valor"))
fig = fig |> layout(legend = list(title = list(text = "FTG")))
fig
??revalue
pacman::p_load(gtsummary, plotly, plyr)
pacman::p_load(gtsummary, plotly, plyr)
dados = readxl::read_xlsx("banco score artigo 2.xlsx")
dados[dados == 999] = NA
conta_NA = function(vet){sum(is.na(vet))}
dados$sexo = dados$sexo |> as.factor()
dados$sexo = revalue(dados$sexo,
c("1" = "Masculino",
"2" = "Feminino"))
dados$extubacao_ok = dados$extubacao_ok |> as.factor()
dados$extubacao_ok = revalue(dados$extubacao_ok,
c("0" = "Sim",
"1" = "Não"))
dados$paliativa = dados$paliativa |> as.factor()
dados$paliativa = revalue(dados$paliativa,
c("0" = "Sim",
"1" = "Não"))
dados$rachs_1 = dados$rachs_1 |> as.factor()
dados$cec = dados$cec |> as.factor()
dados$cec = revalue(dados$cec,
c("0" = "Sim",
"1" = "Não"))
dados$complic_pos_op___10 = dados$complic_pos_op___10 |> as.factor()
dados$desfecho = dados$desfecho |> as.factor()
dados |> select(idade_meses, peso, extubacao_ok, sexo, idade_meses, peso, rachs_1, pim2, paliativa, cec, bh_cx, tfg_pre_op, soma_score_b_pre_op) |>
tbl_summary(label = list(idade_meses ~ "Idade em Meses",
peso ~ "Peso",
extubacao_ok ~ "Extubação",
sexo ~ "Sexo",
rachs_1 ~ "Rachs",
pim2 ~ "Pim",
paliativa ~ "Paliativa",
cec ~ "Cec",
bh_cx ~ "Bh Cx",
tfg_pre_op ~ "TFG Pré Op.",
soma_score_b_pre_op ~ "Score B Pré Op.")) |> bold_labels()
?tbl_summary()
dados |> select(idade_meses, peso, extubacao_ok, sexo, idade_meses, peso, rachs_1, pim2, paliativa, cec, bh_cx, tfg_pre_op, soma_score_b_pre_op) |>
tbl_summary(missing_text = "Dados Faltantes",
label = list(idade_meses ~ "Idade em Meses",
peso ~ "Peso",
extubacao_ok ~ "Extubação",
sexo ~ "Sexo",
rachs_1 ~ "Rachs",
pim2 ~ "Pim",
paliativa ~ "Paliativa",
cec ~ "Cec",
bh_cx ~ "Bh Cx",
tfg_pre_op ~ "TFG Pré Op.",
soma_score_b_pre_op ~ "Score B Pré Op.")) |> bold_labels()
